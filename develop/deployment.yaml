---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: develop
  labels:
    app: develop
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: develop
      devtemplate.naviator.github.io/role: develop
  template:
    metadata:
      labels:
        app: develop
        devtemplate.naviator.github.io/role: develop
      annotations:
        devtemplate.naviator.github.io/backup-delay: "10s"
        devtemplate.naviator.github.io/backup-interval: "5m"
        devtemplate.naviator.github.io/backup-borg-service: "storage:7777"
    spec:
      shareProcessNamespace: true
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
      - name: init-uid
        image: ghcr.io/naviator/backup
        command:
        - /bin/sh
        - -c
        args:
        - echo $(id -u):$(id -g) > /tmp/.runas
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      - name: init-backup
        image: ghcr.io/naviator/backup
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: APP_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app']
        - name: BACKUP_REMOTE
          value: "backup/$(POD_NAMESPACE)/$(APP_NAME)"
        - name: BACKUP_BORG_SERVICE
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devtemplate.naviator.github.io/backup-borg-service']
        command:
        - /bin/sh
        args:
        - /opt/backup/extract.sh
        volumeMounts:
        - name: data
          mountPath: /persistent
      containers:
      - name: backup
        image: ghcr.io/naviator/backup
        env:
        - name: BACKUP_INTERVAL
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devtemplate.naviator.github.io/backup-interval']
        - name: BACKUP_DELAY
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devtemplate.naviator.github.io/backup-delay']
        - name: BACKUP_BORG_SERVICE
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devtemplate.naviator.github.io/backup-borg-service']
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: APP_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app']
        - name: BACKUP_REMOTE
          value: "backup/$(POD_NAMESPACE)/$(APP_NAME)"
        resources:
          requests:
            memory: 20Mi
            cpu: 10m
          limits:
            memory: 100Mi
            cpu: 2000m
        volumeMounts:
        - name: data
          mountPath: /persistent
        command:
        - /bin/sh
        - -c
        args:
        - |
          set -eux

          sleep ${BACKUP_DELAY}
          while true; do
            sh /opt/backup/create.sh
            sleep ${BACKUP_INTERVAL}
          done
      - name: gate
        image: ghcr.io/naviator/bastion
        env:
        - name: HOME
          value: "/root"
        - name: USER
          value: "root"
        - name: TARGET_SHELL
          value: zsh
        - name: SSH_AUTHORIZED_KEYS
          valueFrom:
            secretKeyRef:
              name: user-ssh
              key: authorized_keys
              optional: false
        ports:
        - name: ssh
          containerPort: 2222
        volumeMounts:
          # sharing /tmp because auth_sock_dir was hardcoded
          # https://github.com/openssh/libopenssh/blob/011c12f6898fba5c6f84c287ed39c16efa006012/ssh/session.c#L179
        - name: tmp
          mountPath: /tmp
        - name: devscripts
          mountPath: /devscripts
        - name: visit-target
          subPath: visit_target.sh
          mountPath: /etc/profile
        - name: data
          subPathExpr: home
          mountPath: /data
        - name: data
          subPathExpr: workspace
          mountPath: /workspace
        resources:
          limits:
            memory: 200Mi
            cpu: 2000m
          requests:
            memory: 1Mi
            cpu: 1m
        securityContext:
          runAsUser: 0
          # TODO reduce privileged to required nsenter capabilites
          privileged: true
        startupProbe:
          tcpSocket:
            port: ssh
          failureThreshold: 30
          periodSeconds: 10
          initialDelaySeconds: 3
      - name: main
        image: ghcr.io/naviator/bastion
        stdin: true
        tty: true
        env:
        - name: APP_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.labels['app']
        command:
        - /bin/sh
        - -c
        args:
        - 
          sh /devscripts/provisioning.sh &&
          sh /devscripts/entrypoint.sh
        securityContext:
          runAsUser: 0
        startupProbe:
          exec:
            command:
            - cat
            - /tmp/.pid
          failureThreshold: 30
          periodSeconds: 10
        volumeMounts:
        - name: data
          subPathExpr: home
          mountPath: /data
        - name: data
          subPathExpr: workspace
          mountPath: /workspace
        - name: tmp
          mountPath: /tmp
        - name: devscripts
          mountPath: /devscripts
        - name: user-home
          mountPath: /default-volume/data
        resources:
          limits:
            cpu: 6000m
            memory: 8Gi
          requests:
            cpu: 10m
            memory: 100Mi
      serviceAccountName: dev
      terminationGracePeriodSeconds: 1
      volumes:
      - name: devscripts
        configMap:
          name: devscripts
          defaultMode: 0755
      - name:  visit-target
        configMap:
          name: visit-target
          defaultMode: 0755
      - name: data
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      - name: user-home
        configMap:
          name: user-home
          defaultMode: 0600
