name: GitHub Actions Demo
on: [push]
jobs:
  build-bastion:
    name: Build Bastion
    runs-on: ubuntu-latest
    steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Checkout
      uses: actions/checkout@v2
    - name: Build Bastion Image
      uses: redhat-actions/buildah-build@v2
      id: build-image-bastion
      with:
        image: ghcr.io/${{ github.actor }}/bastion
        context: ./image/bastion/
        platforms: linux/amd64, linux/arm64, linux/arm/v7
        tags: latest ${{ github.sha }}
        containerfiles: |
          ./image/bastion/Containerfile
    # Podman Login action (https://github.com/redhat-actions/podman-login) can also be used to log in,
    # in which case 'username' and 'password' can be omitted.
    - name: Push Bastion Image
      id: push-image-bastion
      uses: redhat-actions/push-to-registry@v2.6
      with:
        image: ${{ steps.build-image-bastion.outputs.image }}
        tags: ${{ steps.build-image-bastion.outputs.tags }}
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Print image url
      run: |
        echo "Image pushed to ${{ steps.push-image-bastion.outputs.registry-paths }}"

  build-backup:
    name: Build Backup
    runs-on: ubuntu-latest
    steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Checkout
      uses: actions/checkout@v2
    - name: Build Backup Image
      uses: redhat-actions/buildah-build@v2
      id: build-image-backup
      with:
        image: ghcr.io/${{ github.actor }}/backup
        context: ./image/backup/
        platforms: linux/amd64, linux/arm64, linux/arm/v7
        tags: latest ${{ github.sha }}
        containerfiles: |
          ./image/backup/Containerfile
    - name: Push Backup Image
      id: push-image-backup
      uses: redhat-actions/push-to-registry@v2.6
      with:
        image: ${{ steps.build-image-backup.outputs.image }}
        tags: ${{ steps.build-image-backup.outputs.tags }}
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

  build-develop:
    name: Build Develop
    runs-on: ubuntu-latest
    steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Checkout
      uses: actions/checkout@v2
    - name: Build Develop Image
      uses: redhat-actions/buildah-build@v2
      id: build-image-develop
      with:
        image: ghcr.io/${{ github.actor }}/develop
        context: ./image/develop/
        platforms: linux/amd64, linux/arm64
        tags: latest ${{ github.sha }}
        containerfiles: |
          ./image/develop/Containerfile
    - name: Push Develop Image
      id: push-image-develop
      uses: redhat-actions/push-to-registry@v2.6
      with:
        image: ${{ steps.build-image-develop.outputs.image }}
        tags: ${{ steps.build-image-develop.outputs.tags }}
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Print image url
      run: |
        echo "Image pushed to ${{ steps.push-image-bastion.outputs.registry-paths }}";
        echo "Image pushed to ${{ steps.push-image-backup.outputs.registry-paths }}";
        echo "Image pushed to ${{ steps.push-image-develop.outputs.registry-paths }}";

  test-k8s:
    name: Test K8s - kind cluster
    runs-on: [ubuntu-latest]
    needs: [build-bastion, build-backup]
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-go@v1
      with:
        go-version: 1.19
    - name: Install Kind
      run: |
        go install sigs.k8s.io/kind@v0.17.0
    - name: Create Kind cluster
      run: |
        PATH=$(go env GOPATH)/bin:$PATH kind create cluster
    - name: Run some sanity checks and wait
      # kubectl is already installed on the Github Ubuntu worker
      run: |
        kubectl get nodes -o wide
        kubectl get pods --all-namespaces -o wide
        kubectl get services --all-namespaces -o wide 
        kubectl wait --for=condition=ready --all-namespaces --all pods --timeout=60s
    - name: Run tests
      run: |
        make test_k8s
